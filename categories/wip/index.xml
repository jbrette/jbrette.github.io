<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wip on Jerome Brette&#39;s Blog</title>
    <link>/categories/wip/</link>
    <description>Recent content in Wip on Jerome Brette&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/wip/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Build and Deploy Kubernetes test-infra</title>
      <link>/post/2018-07-30-a/</link>
      <pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-30-a/</guid>
      <description> Goal test-infra seems to somewhat overlap with sonobuoy features. The purpose of this post is to fetch the code, compile and deploy it on a Kubernetes cluster.
Key Aspects  Compile and deploy the test-infra code in test-infra  Deploy  WIP  Conclusion  WIP  Reference Links  Official test-infra Code  </description>
    </item>
    
    <item>
      <title>Build and Deploy Kubernetes Kustomize</title>
      <link>/post/2018-07-29-a/</link>
      <pubDate>Sun, 29 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-29-a/</guid>
      <description> Goal kustomize seems to help the setup of multiple clusters by removing copy paste accross cluster and still keeping the configuration file has plain yaml instead of the template like it is often the case with t
Key Aspects  Compile and deploy the Kustomize code in Kustomize  Deploy  WIP  Conclusion  WIP  Reference Links  Kustomize Description Official Kustomize Code  </description>
    </item>
    
    <item>
      <title>Build and Deploy MachineLearning Kubeflow Framework</title>
      <link>/post/2018-07-19-a/</link>
      <pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-19-a/</guid>
      <description> Goal Kubeflow is a process that allows you to deploy machine learning infrastructure on top of a Kubernetes cluster. The goal here is to deploy Kubeflow first on a local simple Kubernetes cluster running in a VM and then deploy it in the Kubernetes PI Cluster
Key Aspects  WIP  Deploy  WIP  Conclusion  WIP  Reference Links  [Kubernetes cross build]()  </description>
    </item>
    
    <item>
      <title>Compile and Test Portieris</title>
      <link>/post/2018-07-18-a/</link>
      <pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-18-a/</guid>
      <description>Goal One of the biggest security risks related to Kubernetes are often linked to the fact that it is really hard to ensure that only &amp;ldquo;approved&amp;rdquo; images are deployed in your Kubernetes cluster. The goal here is to leverage Notary and the a project called &amp;ldquo;Portieris&amp;rdquo; created by IBM.
Key Aspects  Rebuild the Notary Rebuild and Deploy Portieris using Helm  Build Notary Clone go get github.com/theupdateframework/notary go install -tags pkcs11 github.</description>
    </item>
    
    <item>
      <title>Rebuild Calico for AMD64 ad ARM32V7</title>
      <link>/post/2018-07-17-a/</link>
      <pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-17-a/</guid>
      <description> Goal Neither calico nor canal seems to be available for usage yet on ARM32V7 for PI. The attempt here is to cross-compile the calico containers and use them on the PI cluster.
Key Aspects  Rebuild the Calico  Build Kubernetes executables for AMD64 and ARM  WIP  Conclusion  WIP  Reference Links  [Kubernetes cross build]()  </description>
    </item>
    
    <item>
      <title>Rebuild Hyperkube images</title>
      <link>/post/2018-07-16-a/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-16-a/</guid>
      <description> Goal This post is to validate that it would be possible if urgency dictates it to rebuild the hyperkube Kubernetes image.
Key Aspects  Rebuild Hyperkube images for amd64 and arm32v7 Rebuild the individual images deployed by kubeadm  Build Kubernetes executables for AMD64 and ARM  WIP  Conclusion  WIP  Reference Links  [Kubernetes cross build]()  </description>
    </item>
    
    <item>
      <title>Add Persistency Volume to PI Clusters</title>
      <link>/post/2018-07-08-a/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-08-a/</guid>
      <description> Goal In order to install OpenHAB, HomeAssistent or even promoteheus using Kubernetes, we need to first create Persistency Volumes
Procedures  WIP  Results    Reference Links  TBD  </description>
    </item>
    
    <item>
      <title>Zuul</title>
      <link>/post/2018-06-26-a/</link>
      <pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-26-a/</guid>
      <description> Goal OpenStack project are using Zuul for CI/CD process. Zuul itself is based on Ansible to perform the tasks. This post is the collection of notes and tips used during the couple of update I did to some openstack projects.
Understanding Zuul  WIP  Usefull Links  WIP  </description>
    </item>
    
    <item>
      <title>Setup github/gerrit behind a corporate http proxy</title>
      <link>/post/2018-06-25-a/</link>
      <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-25-a/</guid>
      <description>Goal This is a post of the small set of notes taken to setup gerrit review behind corporate proxy.
Access GitHub/Gerrit from behind a corporate http proxy TBD
Links TBD</description>
    </item>
    
    <item>
      <title>Setup multiple GitHub account on a single machine</title>
      <link>/post/2018-06-23-a/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-23-a/</guid>
      <description> Goal In orderer to manage your personal GitHub projects or an your compagny projects, it is usefull to be able to conigure your .ssh directory.
Setup multiple GitHub account TBD
Usefull Links  Link1  </description>
    </item>
    
  </channel>
</rss>