<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jerome Brette&#39;s Blog</title>
    <link>/post/</link>
    <description>Recent content on Jerome Brette&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WIP: Deploy Cassandra on Raspberry-PI 3</title>
      <link>/post/2018-07-28-a/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-28-a/</guid>
      <description>Goal  The main goal is to use statefulset and local persistency volume. The arm32v7 image are not available on kubernetes example repository The arm32v7 images are not available either on the docker hub, probably because Cassandra advises to use 64 bits when PI 3 are still mainly 32 bits OS and that the amount of memory available is limited to 1Gbi.  Build Cassandra for PI 3 Cassandra 1 Based on various Cassandra running on RPI projects</description>
    </item>
    
    <item>
      <title>WIP: Build and Deploy MachineLearning Kubeflow Framework</title>
      <link>/post/2018-07-19-a/</link>
      <pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-19-a/</guid>
      <description> Goal  WIP  Deploy  WIP  Conclusion  WIP  Reference Links  [Kubernetes cross build]()  </description>
    </item>
    
    <item>
      <title>WIP: Compile and Test Portieris</title>
      <link>/post/2018-07-18-a/</link>
      <pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-18-a/</guid>
      <description>Goal  Rebuild the Notary Rebuild and Deploy Portieris using Helm  Build Notary Clone go get github.com/theupdateframework/notary go install -tags pkcs11 github.com/theupdateframework/notary/cmd/notary Run notary -s https://notary.docker.io -d ~/.docker/trust list docker.io/library/alpine$ notary -s https://notary.docker.io -d ~/.docker/trust list docker.io/library/alpine NAME DIGEST SIZE (BYTES) ROLE ---- ------ ------------ ---- 2.6 9ace551613070689a12857d62c30ef0daa9a376107ec0fff0e34786cedb3399b 528 targets 2.7 9f08005dff552038f0ad2f46b8e65ff3d25641747d3912e3ea8da6785046561a 1374 targets 3.1 2f9dfa6adf602d3d7379f11f3d4fd0b7b4d1c526616ee7c0fd5e553a72e4bf79 433 targets 3.2 4b02d27451aabdf2b6bcd09888deed56b2a3b645aab3b77bc9511cf80d0820a6 433 targets 3.3 37f4d7bb352bde58797d0f0c4e6c4e69a9ed44d4e47a8ab4461888d117d14c6a 433 targets 3.4 c1aa0f93d13258dc8b4e87391f02432dc214736c3f176e2e433629c2afe96aa0 433 targets 3.</description>
    </item>
    
    <item>
      <title>WIP: Rebuild Calico for AMD64 ad ARM32V7</title>
      <link>/post/2018-07-17-a/</link>
      <pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-17-a/</guid>
      <description> Goal  Rebuild the Calico  Build Kubernetes executables for AMD64 and ARM  WIP  Conclusion  WIP  Reference Links  [Kubernetes cross build]()  </description>
    </item>
    
    <item>
      <title>WIP: Rebuild Hyperkube images</title>
      <link>/post/2018-07-16-a/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-16-a/</guid>
      <description> Goal  Rebuild Hyperkube images for amd64 and arm32v7 Rebuild the individual images deployed by kubeadm  Build Kubernetes executables for AMD64 and ARM  WIP  Conclusion  WIP  Reference Links  [Kubernetes cross build]()  </description>
    </item>
    
    <item>
      <title>Recompile Kubernetes components for Raspberry PI</title>
      <link>/post/2018-07-15-a/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-15-a/</guid>
      <description>Goal  During the installation of official Kubernetes 1.11.0 on RPI Cluster 1, encountered a bug on the controller manager preventing the controller-manager from starting. (Strangely did not encounter the issue on RPI Cluster 2)&amp;gt; The bug had been fixed by the Kubernetes kube-controller-manager - panic: runtime error: index out of range has been fixed and will be built as part of 1.11.1 The goal is to learn how to recompile Kubernetes from the source to be able to contribute when possible and address problems as soon as possible  Build Kubernetes executables for AMD64 and ARM Cross Compiling from Ubuntu Machine First check the go setup.</description>
    </item>
    
    <item>
      <title>Deploy Flannel in Raspberry PI cluster</title>
      <link>/post/2018-07-14-a/</link>
      <pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-14-a/</guid>
      <description>Goal  Flannel seems to deploy ok. Looks like in trouble when multiple interfaces available Calico in not compiled by default for Rapsberry PI  Flannel Setup through kubectl $ mkdir -p $HOME/kube-deployments/flannel $ cd $HOME/kube-deployments/flannel $ curl -sSL https://rawgit.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml | sed &amp;#34;s/amd64/arm/g&amp;#34; &amp;gt; flannel.yaml $ kubectl create -f flannel.yaml  Note: realized that should be using flannel v0.10.0 instead of v0.9.1
Flannel Issue 1: flannel.1. Link has incompatible address on master-pi, both the WLAN and LAN interfaces were activated.</description>
    </item>
    
    <item>
      <title>Deploy Helm and Tiller on Rasberry PI Cluster</title>
      <link>/post/2018-07-13-a/</link>
      <pubDate>Fri, 13 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-13-a/</guid>
      <description>Goal  The goal is to setup helm and tiller on the Raspberry PI cluster Having the golang, glide&amp;hellip;and related libraries setup in a PI for compilation is kind of complicated. I started but encounter too many issues (even small), had to install too many compilation related packages on my PI system, hence decided to use an Ubuntu VM to compile and prepare the binaries for image for helm and tiller.</description>
    </item>
    
    <item>
      <title>Enable docker remote API</title>
      <link>/post/2018-07-12-a/</link>
      <pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-12-a/</guid>
      <description>Goal In order to build image for Raspberry PI, it is sometimes usefull to be able to leverate infrastruture from a remote VM. For instance you can cross-build golang executable for ARM32v7 and transfer it to build an image on the remote PI. (used for Tiller docker image)
Generating the server certs In the case this Kubernetes cluster, the master is running on master-pi with IP address 192.168.1.95
as root</description>
    </item>
    
    <item>
      <title>Use github repo as helm chart repository</title>
      <link>/post/2018-07-11-a/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-11-a/</guid>
      <description>Goal  Save the helm charts on github mainly for the RPI Kubernetes cluster Figure out a way to access them  Build the chart and upload it to the helm repo For that purpose I used by kubeplay repo where I had helm charts and container ready
git clone -b arm32v7 git@github.com:jbrette/kubeplay.git cd kubeplay/ helm package charts/kubeplay-arm32v7/ --app-version 0.1.0 --destination ./helmrepo/ cd helmrepo/ helm repo index . git add .</description>
    </item>
    
    <item>
      <title>WIP: Add Persistency Volume to PI Clusters</title>
      <link>/post/2018-07-08-a/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-08-a/</guid>
      <description> Goal  In order to install OpenHAB or HomeAssistent using Kubernetes, we need to first create Persistency Volumes  Procedures  WIP  Results    Reference Links  TBD  </description>
    </item>
    
    <item>
      <title>Using Ansible to manage Raspberry PI cluster</title>
      <link>/post/2018-07-07-a/</link>
      <pubDate>Sat, 07 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-07-a/</guid>
      <description>Goal Even if the ultimate goal is to manage completly the cluster using Kubernetes, the ability to use Ansible during debug process is very usefull. The goal here is to setup ansible inventory, basic playbooks.
Ansible Installation on the master node Let&amp;rsquo;s install ansible using apt-get. A lot of python related depedencies are also installed.
sudo apt-get install ansible Reading package lists... Done Building dependency tree Reading state information... Done The following additional packages will be installed: ieee-data libyaml-0-2 python-cffi-backend python-crypto python-cryptography python-enum34 python-httplib2 python-idna python-ipaddress python-jinja2 python-kerberos python-markupsafe python-netaddr python-paramiko python-pkg-resources python-pyasn1 python-selinux python-setuptools python-six python-xmltodict python-yaml Suggested packages: cowsay sshpass python-crypto-dbg python-crypto-doc python-cryptography-doc python-cryptography-vectors python-enum34-doc python-jinja2-doc ipython python-netaddr-docs python-gssapi doc-base python-setuptools-doc Recommended packages: python-winrm The following NEW packages will be installed: ansible ieee-data libyaml-0-2 python-cffi-backend python-crypto python-cryptography python-enum34 python-httplib2 python-idna python-ipaddress python-jinja2 python-kerberos python-markupsafe python-netaddr python-paramiko python-pkg-resources python-pyasn1 python-selinux python-setuptools python-six python-xmltodict python-yaml 0 upgraded, 22 newly installed, 0 to remove and 6 not upgraded.</description>
    </item>
    
    <item>
      <title>ZWave/ZigBee network and Linear HUSBZBâ€‘1</title>
      <link>/post/2018-07-06-a/</link>
      <pubDate>Fri, 06 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-06-a/</guid>
      <description>Goal  Transform Raspberry-PI + Dongle into a SUC ZWave controller Try to use with OpenHAB or HomeAssistant  Testing on the OpenHAB Container The OpenHAB architecture is Java based.
Testing on the HomeAssistant Container HomeAssistant is Python based and relies on OpenZWave. Some of the data is also saved in SQLite. In both cases developping small Python scripts to investigate the setup seems to be the easiest way.</description>
    </item>
    
    <item>
      <title>Install OpenHAB on docker &#43; Raspberry PI3</title>
      <link>/post/2018-07-05-a/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-05-a/</guid>
      <description>Goal  Use the 3 nodes Raspeberry Cluster Access the WIFI, ZWave and Zigbee network Leverage the Nortek HUSBZB-1 Zwave and Zigbee dongle. Try to install OpenHab on node 3 of the cluster (Picture to be update with Dongle on bottom node).  Setup the host operating system Moved the dongle to the third node of the cluster. Check it is present
~~~~ lsusb
Bus 001 Device 004: ID 10c4:8a2a Cygnal Integrated Products, Inc.</description>
    </item>
    
    <item>
      <title>Install HomeAssistant on docker &#43; Raspberry PI3</title>
      <link>/post/2018-07-04-a/</link>
      <pubDate>Wed, 04 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-04-a/</guid>
      <description>Goal  Use the 3 nodes Raspeberry Cluster Access the WIFI, ZWave and Zigbee network Leverage the Nortek HUSBZB-1 Zwave and Zigbee dongle. Install Home Assistant on node 2 of the cluster  What OS  Home Assistant haas.io does not support Raspberry 3 B+ yet. haas.io is based on ResinOS. ResinOS is not using docker anymore but balena which does not support kubernetes yet See Issue Continue to use HyperiotOS  Install AppArmor and download docker container cat newpgklist apparmor-utils apt-transport-https avahi-daemon ca-certificates curl dbus jq network-manager socat software-properties-common  for i in `cat newpgklist` do sudo apt-get install -y $i done  Download and run the installation script.</description>
    </item>
    
    <item>
      <title>Creating a Raspberry 3 B&#43; Kubernetes Cluster</title>
      <link>/post/2018-07-03-a/</link>
      <pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-03-a/</guid>
      <description>Goal  Build a Raspberry 3B+ Cluster Deploy Kubernetes on that Cluster  Hardware Reference Links  Video  Procedure  Kind of followed the video Used a premade rack instead. Adapt to Raspberry 3B+ (1Gb card instead of 100Mb card)  Result Cluster 1: 5 nodes cluster Cluster 2: 3 nodes cluster OS Reference Links  Video HypriotOS  Procedure  Use HypriotOS because the quickest to set up.</description>
    </item>
    
    <item>
      <title>Compile and Test SONOBUOY</title>
      <link>/post/2018-07-02-a/</link>
      <pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-02-a/</guid>
      <description>Goal  Fork Sonobuoy Compile the tools Test it  Clone and Compile mkdir -p $HOME/src/github.com/heptio cd $HOME/src/github.com/heptio git clone git@github.com:jbrette/sonobuoy.git  export GOPATH=$HOME go version go version go1.10.1 linux/amd64  go get -u -v github.com/heptio/sonobuoy  sonobuoy run sonobuoy status  kubectl get all -n heptio-sonobuoy NAME READY STATUS RESTARTS AGE pod/sonobuoy 1/1 Running 0 14m pod/sonobuoy-e2e-job-5fff584d11364ca1 2/2 Running 0 12m pod/sonobuoy-systemd-logs-daemon-set-1c53f31cf14246ca-mhztp 2/2 Running 0 12m NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/sonobuoy-master ClusterIP 10.</description>
    </item>
    
    <item>
      <title>Creating simple Python server container</title>
      <link>/post/2018-07-01-a/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-01-a/</guid>
      <description>Goal  Use SCRATCH has base image to keep size minimum Simple HelloWorld Python web server Create associated HELM chart for Kubernetes deployment Provide deployment for both amd64 and arm32v7  Simple Python Server The pythonhttpserver repo showcases: - How to create a simple Python3 server - How to leverage Travis to compile for amd64 and arm32v7. - Branch amd64 is for normal PC and HP server. - Branch arm32v7 produces software usable on Raspberry PI 3B+</description>
    </item>
    
    <item>
      <title>Update Kubernetes to 1.11 on Ubuntu</title>
      <link>/post/2018-06-30-a/</link>
      <pubDate>Sat, 30 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-30-a/</guid>
      <description>Initial set up Kubernetes 1.10.4 is installed
cat /etc/apt/sources.list.d/kubernetes.list deb http://apt.kubernetes.io/ kubernetes-xenial main  sudo dpkg -l kubeadm Desired=Unknown/Install/Remove/Purge/Hold | Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend |/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad) ||/ Name Version Architecture Description +++-======================================-========================-========================-================================================================================= ii kubeadm 1.10.4-00 amd64 Kubernetes Cluster Bootstrapping Tool  sudo dpkg -l kubelet Desired=Unknown/Install/Remove/Purge/Hold | Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend |/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad) ||/ Name Version Architecture Description +++-======================================-========================-========================-================================================================================= ii kubelet 1.10.4-00 amd64 Kubernetes Node Agent  sudo dpkg -l kubectl Desired=Unknown/Install/Remove/Purge/Hold | Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend |/ Err?</description>
    </item>
    
    <item>
      <title>Creating simple GO server container</title>
      <link>/post/2018-06-29-a/</link>
      <pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-29-a/</guid>
      <description>Goal  Use SCRATCH has base image to keep size minimum Simple HelloWorld GO web server Create associated HELM chart for Kubernetes deployment Provide deployment for both amd64 and arm32v7  Simple GO Server compilation The gohttpserver repo showcases: - How to compile a GO process - How to leverage Travis to compile for amd64 and arm32v7. - Branch amd64 is for normal PC and HP server. - Branch arm32v7 produces software usable on Raspberry PI 3B+</description>
    </item>
    
    <item>
      <title>Creating simple Java 10 server container</title>
      <link>/post/2018-06-28-a/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-28-a/</guid>
      <description>Goal  Use SCRATCH has base image to keep size minimum Simple HelloWorld Java 10 web server Create associated HELM chart for Kubernetes deployment Provide deployment for both amd64 and arm32v7  Install Java 10 on dev machine sudo add-apt-repository ppa:linuxuprising/java Oracle Java 10 installer Java binaries are not hosted in this PPA due to licensing. The packages in this PPA download and install Oracle Java 10 (JDK 10), so a working Internet connection is required.</description>
    </item>
    
    <item>
      <title>Manual Update of CoreOS</title>
      <link>/post/2018-06-27-a/</link>
      <pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-27-a/</guid>
      <description>Manual Update Of CoreOS To create kubernetes multi nodes environments on Windows, one of the option is to create a cluster using CoreOS since the foot print is quite reduced.
Setup of the cluster TBD
Update of the cluster I found the following link
sudo bash -c &#39;mkdir -p /etc/systemd/system/docker.service.d/; cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/systemd/system/docker.service.d/50-insecure-registry.conf [Service] Environment=&amp;quot;DOCKER_OPTS=--insecure-registry 10.0.0.0/8 --insecure-registry 172.16.0.0/12 --insecure-registry 192.168.0.0/16&amp;quot; EOF &#39;  sudo bash -ec &#39;uname -a &amp;amp;&amp;amp; cat /etc/lsb-release &amp;amp;&amp;amp; \ echo GROUP=stable &amp;gt; /etc/coreos/update.</description>
    </item>
    
    <item>
      <title>WIP: Zuul</title>
      <link>/post/2018-06-26-a/</link>
      <pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-26-a/</guid>
      <description> Understanding Zuul  WIP  Usefull Links  WIP  </description>
    </item>
    
    <item>
      <title>WIP: Setup github/gerrit behind a corporate http proxy</title>
      <link>/post/2018-06-25-a/</link>
      <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-25-a/</guid>
      <description>Access GitHub/Gerrit from behind a corporate http proxy TBD
Links TBD</description>
    </item>
    
    <item>
      <title>docker.io versus docker-ce</title>
      <link>/post/2018-06-24-a/</link>
      <pubDate>Sun, 24 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-24-a/</guid>
      <description>Installing the right version of Docker Wondering why you have a strange error such as &amp;lsquo;from &amp;hellip;&amp;rsquo; when running docker build. The reason is linked to an older version of docker installed. You need to remove the current docker.io.
sudo apt-cache policy docker.io curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&amp;quot; sudo apt-get update sudo apt-cache policy docker-ce sudo apt-get remove docker docker-engine docker.</description>
    </item>
    
    <item>
      <title>Setup multiple GitHub account on a single machine</title>
      <link>/post/2018-06-23-a/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-23-a/</guid>
      <description> Setup multiple GitHub account TBD
Usefull Links  Link1  </description>
    </item>
    
    <item>
      <title>Setup your GOLANG environment</title>
      <link>/post/2018-06-22-a/</link>
      <pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-22-a/</guid>
      <description>Installing the right version of GO If you have strange errors, when running go get &amp;hellip;., chances are that your version of GO is old. On Ubuntu, it is actually quite simple to address the issue.
If you are still running Ubuntu 16.04 LTS
sudo add-apt-repository ppa:longsleep/golang-backports sudo apt-get update sudo apt-get install golang-go  How to setup your GOPATH A lot of things seems to work much better if you edit your .</description>
    </item>
    
    <item>
      <title>Setup SingleNode Kubernetes Cluster using kubeadm</title>
      <link>/post/2018-06-21-a/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-21-a/</guid>
      <description>Add Kubernetes APT Repo If you are still running Ubuntu 16.04 LTS
sudo xxx sudo apt-get update sudo apt-get install kubeadm kubelet kubectl  sudo docker version Client: Version: 1.13.1 API version: 1.26 Go version: go1.6.2 Git commit: 092cba3 Built: Thu Nov 2 20:40:23 2017 OS/Arch: linux/amd64 Server: Version: 1.13.1 API version: 1.26 (minimum version 1.12) Go version: go1.6.2 Git commit: 092cba3 Built: Thu Nov 2 20:40:23 2017 OS/Arch: linux/amd64 Experimental: false  sudo kubeadm version kubeadm version: &amp;amp;version.</description>
    </item>
    
    <item>
      <title>Create a Rapsberry PI Rescue Dongle</title>
      <link>/post/2018-06-20-a/</link>
      <pubDate>Wed, 20 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-20-a/</guid>
      <description>Goal I encountered multiple issues trying to repartition my SD on my PI. Because the / directory is mounted, it never really worked safely for me to use fdisk. Morevoer some of the powerfull tools such as gparted need X11 installed, which I don&amp;rsquo;t have by default.
Hopefully the new PI3 B and B+ are able to boot from USB, hence the idea of creating a Rescue Dongle
Consideration regarding USB boot.</description>
    </item>
    
    <item>
      <title>Add Raspberry PI node to Kubernetes Cluster in 10 min</title>
      <link>/post/2018-06-19-a/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-19-a/</guid>
      <description>During some of the manipulation of the partition table of my SD card, I ended up screwing up both my SD card and my backup Win32DiskImage backup. Moreover if your SD card is 32G, it takes around 30 minute to restore from backup. Hence the idea to come up with a way to build more resiliency in the cluster. Recreating a node from scratch should not take more than 10 mn.</description>
    </item>
    
  </channel>
</rss>