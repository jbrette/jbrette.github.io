<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>APPS on Jerome Brette&#39;s Blog</title>
    <link>https://jbrette.github.io/kubernetes/apps/</link>
    <description>Recent content in APPS on Jerome Brette&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://jbrette.github.io/kubernetes/apps/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating simple Python server container</title>
      <link>https://jbrette.github.io/kubernetes/apps/2018-07-01-a/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jbrette.github.io/kubernetes/apps/2018-07-01-a/</guid>
      <description>Goal As we did for Go and Java, where is was possible to create an Dockerfile starting from &amp;ldquo;scratch&amp;rdquo;, the goal of this post is to create a python base server container with a minimum about of packages (debian and python) to reduce the security exposure of the container as well as the image size.
Key Aspects  Use SCRATCH has base image to keep size minimum Simple HelloWorld Python web server Create associated HELM chart for Kubernetes deployment Provide deployment for both amd64 and arm32v7  Simple Python Server The pythonhttpserver repo showcases:</description>
    </item>
    
    <item>
      <title>Creating simple GO server container</title>
      <link>https://jbrette.github.io/kubernetes/apps/2018-06-29-a/</link>
      <pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jbrette.github.io/kubernetes/apps/2018-06-29-a/</guid>
      <description>Goal  Use SCRATCH has base image to keep size minimum Simple HelloWorld GO web server Create associated HELM chart for Kubernetes deployment Provide deployment for both amd64 and arm32v7  Simple GO Server compilation The gohttpserver repo showcases:
 How to compile a GO process How to leverage Travis to compile for amd64 and arm32v7. Branch amd64 is for normal PC and HP server. Branch arm32v7 produces software usable on Raspberry PI 3B+  Kubeplay Github repo The kubeplay repo describes:</description>
    </item>
    
    <item>
      <title>Creating simple Java 10 server container</title>
      <link>https://jbrette.github.io/kubernetes/apps/2018-06-28-a/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jbrette.github.io/kubernetes/apps/2018-06-28-a/</guid>
      <description>Goal Very often people associated Java to quite bulky and difficult to use in the microservice context, unless you have very large image containing the JRE. But since Java 9, Java did kind of catchup with golang on the subject. Where you can obtain a standalone executable when we running go build, java is now proposing jlink which always you to acheive a very similar result. The goal of this post is to build a container image as small as possible running Java.</description>
    </item>
    
  </channel>
</rss>
